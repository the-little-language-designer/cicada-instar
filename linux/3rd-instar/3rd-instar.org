#+TITLE:  齡三 / 3rd-instar
#+AUTHOR: 謝宇恆 / XIE Yuheng

* ===================================
* note instar
** 1st-instar
   * indirect-threaded-code interpreter
     1. macro about argument-stack & return-stack
     2. macro about jo & jojo
     3. macro about next
     4. the way to do memory allocation
     5. begin_to_interpret_threaded_code
     6. little_test
** 2ed-instar
   * instruction as special primitive function
     1. literal
     2. address
   * and primitive functions about
     1. the stack
     2. bool
     3. fixnum
     4. memory
   * and taca for explicit tail-call
   * false?branch and taca are needed for "power"
** 3rd-instar
   * primitive function about io
     1. write_byte
     2. read_byte
* ===================================
* prolog
** misc
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; in fasm, "dup" is a reserved word
   dup equ duplicate

   ;; in fasm, "end" is a reserved word
   finish equ end
   end equ exit
   #+end_src
** cell_size                          :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   cell_size = 4 ;; (byte)
   xx equ dd

   rax equ eax
   rbx equ ebx
   rcx equ ecx
   rdx equ edx
   rsp equ esp
   rbp equ ebp
   rsi equ esi
   rdi equ edi

   syscall equ int 80h
   #+end_src
** header                             :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define linux32_sys_6_ebp ebp
   define linux32_sys_5_edi edi
   define linux32_sys_4_esi esi
   define linux32_sys_3_edx edx
   define linux32_sys_2_ecx ecx
   define linux32_sys_1_ebx ebx
   define linux32_sys_n_eax eax

   define linux32_syscall_exit    1
   define linux32_syscall_read    3
   define linux32_syscall_write   4
   define linux32_syscall_open    5
   define linux32_syscall_close   6
   #+end_src
** format                             :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   format ELF executable 3
   #+end_src
** entry                              :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   entry begin_to_interpret_threaded_code
   segment readable executable writeable
   #+end_src
** memory allocation in un_initialized_memory
   * implemented as a memory map
   #+begin_src fasm :tangle cicada-nymph.fasm
   current_free_address$un_initialized_memory = address$un_initialized_memory

   labeling  equ = current_free_address$un_initialized_memory
   preserve  equ current_free_address$un_initialized_memory = current_free_address$un_initialized_memory +
   #+end_src
* -----------------------------------
* note stack
  * when doing "push"
    a stack-pointer moves to lower address
  * note that another style is that
    when doing "push"
    a stack-pointer moves to higher address
  * the stack-pointer
    always stores the address of current-free-address of the stack
  * note that another style is that
    under the stack-pointer
    there always stores the value of the-top-of-the-stack
* argument-stack
** memory allocation
   * for we do not build border-check
     into the interface of pop and push
     we allocation some memory below the stacks
   #+begin_src fasm :tangle cicada-nymph.fasm
      preserve 64 * cell_size
   address$argument_stack labeling
      preserve 1024 * 1024 * cell_size
   #+end_src
** pointer                            :64bit:
   #+begin_src fasm
   ;; if you want to extend cicada in assembly
   ;; the following registers must NOT be used

   define pointer$argument_stack r15
   #+end_src
** push & pop                         :64bit:
   #+begin_src fasm
   macro push_argument_stack register {
      mov [pointer$argument_stack], register
      add pointer$argument_stack, cell_size
   }

   macro pop_argument_stack register {
      sub pointer$argument_stack, cell_size
      mov register, [pointer$argument_stack]
   }
   #+end_src
** pointer                            :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   pointer$argument_stack:
      xx address$argument_stack
   #+end_src
** push & pop                         :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro push_argument_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$argument_stack]
      mov [ebx], register
      add ebx, cell_size
      mov [pointer$argument_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$argument_stack]
      mov [eax], register
      add eax, cell_size
      mov [pointer$argument_stack], eax
      pop eax
      finish if
   }

   macro pop_argument_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$argument_stack]
      sub ebx, cell_size
      mov register, [ebx]
      mov [pointer$argument_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$argument_stack]
      sub eax, cell_size
      mov register, [eax]
      mov [pointer$argument_stack], eax
      pop eax
      finish if
   }
   #+end_src
* return-stack
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
      preserve 64 * cell_size
   address$return_stack labeling
      preserve 1024 * 1024 * cell_size
   #+end_src
** pointer                            :64bit:
   #+begin_src fasm
   ;; if you want to extend cicada in assembly
   ;; the following registers must NOT be used

   define pointer$return_stack r14
   #+end_src
** push & pop                         :64bit:
   #+begin_src fasm
   macro push_return_stack register {
      mov [pointer$return_stack], register
      add pointer$return_stack, cell_size
   }

   macro pop_return_stack register {
      sub pointer$return_stack, cell_size
      mov register, [pointer$return_stack]
   }
   #+end_src
** pointer                            :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   pointer$return_stack:
      xx address$return_stack
   #+end_src
** push & pop                         :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro push_return_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$return_stack]
      mov [ebx], register
      add ebx, cell_size
      mov [pointer$return_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$return_stack]
      mov [eax], register
      add eax, cell_size
      mov [pointer$return_stack], eax
      pop eax
      finish if
   }

   macro pop_return_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$return_stack]
      sub ebx, cell_size
      mov register, [ebx]
      mov [pointer$return_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$return_stack]
      sub eax, cell_size
      mov register, [eax]
      mov [pointer$return_stack], eax
      pop eax
      finish if
   }
   #+end_src
* next
  #+begin_src fasm :tangle cicada-nymph.fasm
  macro next {
     pop_return_stack rbx
       mov rax, [rbx]
     add rbx, cell_size
     push_return_stack rbx
       jmp dword [rax]
  }
  #+end_src
* note play with jo & jojo
  1. at the beginning
     * argument-stack
       << 2 >>
     * return-stack
       #+begin_src return-stack
       - [ (square) ]
           (square)
           (end)
       #+end_src
  2. next
     * argument-stack
       << 2 >>
     * return-stack
       #+begin_src return-stack
           (square)
       - [ (square) ] - [ (dup) ]
           (end)          (mul)
                          (end)
       #+end_src
  3. next
     * argument-stack
       << 2, 2 >>
     * return-stack
       #+begin_src return-stack
           (square)       (dup)
       - [ (square) ] - [ (mul) ]
           (end)          (end)
       #+end_src
  4. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
                          (dup)
           (square)       (mul)
       - [ (square) ] - [ (end) ]
           (end)
       #+end_src
  5. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
       - [ (square) ]
           (end)
       #+end_src
  6. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)
       - [ (end) ] - [ (dup) ]
                       (mul)
                       (end)
       #+end_src
  7. next
     * argument-stack
       << 4, 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)    (dup)
       - [ (end) ] - [ (mul) ]
                       (end)
       #+end_src
  8. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
           (square)    (dup)
           (square)    (mul)
       - [ (end) ] - [ (end) ]
       #+end_src
  9. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)
       - [ (end) ]
       #+end_src
  10. next
      * argument-stack
        << 16 >>
      * return-stack
        #+begin_src return-stack
        - [  ]
        #+end_src
  11. it is really simple
      ^-^
      is it not ?
* helper function in assembly code
** __exit_with_tos                    :linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   __exit_with_tos:
      ;; << exit-code -- >>
      pop_argument_stack linux32_sys_1_ebx
      mov linux32_sys_n_eax, linux32_syscall_exit
      syscall
   #+end_src
* macro for jo & explainer
** ----------------------------------
** link
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; initial link to point to 0 (as null)
   link = 0
   #+end_src
** ----------------------------------
** note primitive_string_heap
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
   size$primitive_string_heap = 100 * 1024 ;; (byte)

   address$primitive_string_heap:
      times size$primitive_string_heap db 0

   current_free_address$primitive_string_heap = address$primitive_string_heap
   #+end_src
** make_primitive_string
   * 2 bytes for length of name_string
   * note that
     the following is using local label
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro make_primitive_string string {

   virtual at 0
   .start$string:
      db string
   .end$string:
      dw (.end$string - .start$string)
      load .length word from (.end$string)
   finish virtual
   store word .length at (current_free_address$primitive_string_heap)

   current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 2

   repeat .length
      virtual at 0
         db string
         load .char byte from (% - 1)
      finish virtual
      store byte .char at (current_free_address$primitive_string_heap)
      current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 1
   finish repeat

   }
   #+end_src
** ----------------------------------
** note
   * note that
     after a "next" "jmp" to a explainer
     the "rax" stores the value of the jo to be explained
     so
     "rax" is used as an inexplicit argument
     of the following functions
   * explain$function is used as jojo-head
     and explains the meaning of the jojo as function
   * a jojo-head identifies one type of jo
** define_function
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_function string, jo {

   define_function__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx explain$function

      ;; here follows a jojo as function-body

   }
   #+end_src
** explain$function
   * find a jojo from a function-jo
     and push the jojo to return-stack
   * a jojo can not be of size 0
   * use rax as an argument
     which stores a jo
   #+begin_src fasm :tangle cicada-nymph.fasm
   explain$function:
      add rax, cell_size
      push_return_stack rax
      next
   #+end_src
** ----------------------------------
** note
   * primitive functions are special
     they explain themself
     and their type is not identified by jojo-head
** define_primitive_function
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_primitive_function string, jo {

   define_primitive_function__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx assembly_code__#jo

   assembly_code__#jo:

      ;; here follows assembly code
      ;; as primitive function body

   }
   #+end_src
** ----------------------------------
** note
   * no constant
     only variable
   * when a variable jo in the jojo
     it push the value of the variable to argument_stack
   * when wish to change a variable's value
     use key_word "address" to get the address of the variable
** define_variable
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_variable string, jo {

   define_variable__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx explain$variable

      ;; here follows a value of cell_size
      ;; only one value is allowed

   }
   #+end_src
** explain$variable
   #+begin_src fasm :tangle cicada-nymph.fasm
   explain$variable:
      add rax, cell_size
      mov rbx, [rax]
      push_argument_stack rbx
      next
   #+end_src
** ----------------------------------
* end & tail_call
** end
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "end", end
      pop_return_stack rbx
      next
   #+end_src
** tail_call
   * tail-call
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "tail-call", tail_call
      pop_return_stack rbx
      mov rax, [rbx]
      jmp dword [rax]
   #+end_src
** note explicit tail call in action
   1. the tail position of a function body must be recognized
      explicit tail call is used to achieve this
   2. thus
      tail-recursive-call can be use to do loop
      without pushing too many address into return-stack
   3. for example if we have a function
      which is called "example"
      #+begin_src fasm
      define_function "example", example
         xx fun1
         xx fun2
         xx tail_call, example
      #+end_src
   4. and we have the following jojo in return-stack
      #+begin_src return-stack
      - [ (example) ]
          (end)
      #+end_src
   5. next
      #+begin_src return-stack
          (example)
      - [ (end) ] - [ (fun1) ]
                      (fun2)
                      (tail_call)
                      (example)
      #+end_src
   6. next
      #+begin_src return-stack
          (example)   (fun1)
      - [ (end) ] - [ (fun2) ]
                      (tail_call)
                      (example)
      #+end_src
   7. next
      #+begin_src return-stack
                      (fun1)
          (example)   (fun2)
      - [ (end) ] - [ (tail_call) ]
                      (example)
      #+end_src
   8. next
      by the definition of tail_call
      #+begin_src return-stack
          (example)
      - [ (end) ] - [ (fun1) ]
                      (fun2)
                      (tail_call)
                      (example)
      #+end_src
   9. you can see return-stack of (8.)
      is the same as (5.)
      it is clear how the example function
      is actually a loop now
* *the story begin*
** begin_to_interpret_threaded_code   :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   begin_to_interpret_threaded_code:

      cld ;; set DF = 0, then rsi and rdi are incremented

      mov rax, first_jojo
      push_return_stack rax
      next


   first_jojo:
      xx little_test
      xx end
   #+end_src
** exit_with_tos a.k.a. bye
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "bye", exit_with_tos
      call __exit_with_tos
   #+end_src
** little_test
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "", V__little_test_number
      xx 3


   define_function "little_test", little_test

      ;;;; variable
      ;; xx V__little_test_number
      ;; xx exit_with_tos
      ;;;; 3

      ;;;; literal
      ;; xx literal, 4
      ;; xx exit_with_tos
      ;;;; exit ocde : 4

      ;;;; address
      ;; xx address, V__little_test_number, get, add2
      ;; xx address, V__little_test_number, set
      ;; xx V__little_test_number
      ;; xx exit_with_tos
      ;;;; exit ocde : 5

      ;;;; tail_call
      ;; xx literal, 2
      ;; xx literal, 4
      ;; xx power
      ;; xx exit_with_tos
      ;;;; exit ocde : 16


      ;;;; write_byte
      xx literal, 64, write_byte
      xx literal, 10, write_byte
      xx zero
      xx exit_with_tos
      ;;;; @

      ;;;; read_byte
      ;; xx read_byte, write_byte
      ;; xx exit_with_tos
      ;;;;

      ;;;; branch
      ;; xx read_byte, write_byte
      ;; xx branch, -3
      ;;;; read a string that ended by <return>
      ;;;; write the readed string
      ;;;; or we can say
      ;;;; read line and write line
      ;;;; or we can say
      ;;;; echo line

      ;;;; false?branch
      ;; xx false, false?branch, 9
      ;; xx   literal, 64, write_byte
      ;; xx   literal, 10, write_byte
      ;; xx   zero
      ;; xx   exit_with_tos
      ;; xx true, false?branch, 9
      ;; xx   literal, 65, write_byte
      ;; xx   literal, 10, write_byte
      ;; xx   zero
      ;; xx   exit_with_tos
      ;; xx zero
      ;; xx exit_with_tos
      ;;;; A
   #+end_src
** note
   * next
     #+begin_src return-stack
     - [ (little_test) ]
         (end)
     #+end_src
   * next
     #+begin_src return-stack
         (little_test)
     - [ (end) ] -------- [ (V__little_test_number) ]
                            (exit_with_tos)
     #+end_src
   * next
     #+begin_src return-stack
         (little_test)      (V__little_test_number)
     - [ (end) ] -------- [ (exit_with_tos) ]
     #+end_src
* -----------------------------------
* the stack
** ----------------------------------
** drop
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "drop", drop
      ;; << a -- >>
      pop_argument_stack rax
      next

   define_primitive_function "drop2", drop2
      ;; << a b -- >>
      pop_argument_stack rax
      pop_argument_stack rax
      next
   #+end_src
** dup                                :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "dup", dup
      ;; << a -- a a >>
      pop_argument_stack rax
      push_argument_stack rax
      push_argument_stack rax
      next

   define_primitive_function "dup2", dup2
      ;; << a b -- a b a b >>
      pop_argument_stack rbx
      pop_argument_stack rax
      push_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rax
      push_argument_stack rbx
      next
   #+end_src
** over                               :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "over", over
      ;; << a b -- a b | a >>
      mov rbx, [pointer$argument_stack]
      mov rax, [rbx - (2 * cell_size)]
      push_argument_stack rax
      next

   define_primitive_function "x|over|xx", xoverxx
      ;; << a | b c -- a | b c | a >>
      mov rbx, [pointer$argument_stack]
      mov rax, [rbx - (3 * cell_size)]
      push_argument_stack rax
      next

   define_primitive_function "xx|over|x", xxoverx
      ;; << a b | c -- a b | c | a b >>
      mov rbx, [pointer$argument_stack]
      mov rax, [rbx - (3 * cell_size)]
      push_argument_stack rax
      mov rax, [rbx - (2 * cell_size)]
      push_argument_stack rax
      next

   define_primitive_function "xx|over|xx", xxoverxx
      ;; << a b | c d -- a b | c d | a b >>
      mov rbx, [pointer$argument_stack]
      mov rax, [rbx - (4 * cell_size)]
      push_argument_stack rax
      mov rax, [rbx - (3 * cell_size)]
      push_argument_stack rax
      next

   define_primitive_function "x|over|xxx", xoverxxx
      ;; << a | b c d -- a | b c d | a >>
      mov rbx, [pointer$argument_stack]
      mov rax, [rbx - (4 * cell_size)]
      push_argument_stack rax
      next

   define_primitive_function "xx|over|xxxx", xxoverxxxx
      ;; << a b | c d e f -- a b | c d e f | a b >>
      mov rbx, [pointer$argument_stack]
      mov rax, [rbx - (6 * cell_size)]
      push_argument_stack rax
      mov rax, [rbx - (5 * cell_size)]
      push_argument_stack rax
      next
   #+end_src
** tuck
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "tuck", tuck
      ;; << a b -- b | a b >>
      pop_argument_stack rbx
      pop_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rax
      push_argument_stack rbx
      next

   define_primitive_function "x|tuck|xx", xtuckxx
      ;; << a | b c -- b c | a | b c >>
      pop_argument_stack rcx
      pop_argument_stack rbx
      pop_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rcx
      push_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rcx
      next

   define_primitive_function "xx|tuck|x", xxtuckx
      ;; << a b | c -- c | a b | c >>
      pop_argument_stack rcx
      pop_argument_stack rbx
      pop_argument_stack rax
      push_argument_stack rcx
      push_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rcx
      next

   define_primitive_function "xx|tuck|xx", xxtuckxx
      ;; << a b | c d -- c d | a b | c d >>
      pop_argument_stack rdx
      pop_argument_stack rcx
      pop_argument_stack rbx
      pop_argument_stack rax
      push_argument_stack rcx
      push_argument_stack rdx
      push_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rcx
      push_argument_stack rdx
      next

   define_primitive_function "xxx|tuck|x", xxxtuckx
      ;; << a b c | d -- d | a b c | d >>
      pop_argument_stack rdx
      pop_argument_stack rcx
      pop_argument_stack rbx
      pop_argument_stack rax
      push_argument_stack rdx
      push_argument_stack rax
      push_argument_stack rbx
      push_argument_stack rcx
      push_argument_stack rdx
      next
   #+end_src
** swap                               :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "swap", swap
      ;; << a b -- b a >>
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ebx
      push_argument_stack eax
      next

   define_primitive_function "x|swap|xx", xswapxx
      ;; << a | b c -- b c | a >>
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ebx
      push_argument_stack ecx
      push_argument_stack eax
      next

   define_primitive_function "xx|swap|x", xxswapx
      ;; << a b | c -- c | a b >>
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ecx
      push_argument_stack eax
      push_argument_stack ebx
      next

   define_primitive_function "x|swap|xxx", xswapxxx
      ;; << a | b c d -- b c d | a >>
      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ebx
      push_argument_stack ecx
      push_argument_stack edx
      push_argument_stack eax
      next

   define_primitive_function "xxx|swap|x", xxxswapx
      ;; << a b c | d -- d | a b c >>
      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack edx
      push_argument_stack eax
      push_argument_stack ebx
      push_argument_stack ecx
      next

   define_primitive_function "xx|swap|xx", xxswapxx
      ;; << a b | c d -- c d | a b >>
      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ecx
      push_argument_stack edx
      push_argument_stack eax
      push_argument_stack ebx
      next


   define_primitive_function "x|swap|xxxx", xswapxxxx
      ;; << a | b c d e -- b c d e | a >>
      pop_argument_stack eax ;; e
      push eax

      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ebx
      push_argument_stack ecx
      push_argument_stack edx

      pop eax
      push_argument_stack eax ;; e

      push_argument_stack eax
      next

   define_primitive_function "xxxx|swap|x", xxxxswapx
      ;; << a b c d | e --  e | a b c d >>
      pop_argument_stack eax ;; e
      push eax

      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax

      pop eax
      push_argument_stack eax ;; e

      push_argument_stack eax
      push_argument_stack ebx
      push_argument_stack ecx
      push_argument_stack edx
      next


   define_primitive_function "xx|swap|xxxx", xxswapxxxx
      ;; << a b | c d e f -- c d e f | a b >>
      pop_argument_stack eax ;; f
      push eax

      pop_argument_stack eax ;; e
      push eax

      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax
      push_argument_stack ecx
      push_argument_stack edx

      pop eax
      push_argument_stack eax ;; e

      pop eax
      push_argument_stack eax ;; f

      push_argument_stack eax
      push_argument_stack ebx
      next

   define_primitive_function "xxxx|swap|xx", xxxxswapxx
      ;; << a b c d | e f --  e f | a b c d >>
      pop_argument_stack eax ;; f
      push eax

      pop_argument_stack eax ;; e
      push eax

      pop_argument_stack edx
      pop_argument_stack ecx
      pop_argument_stack ebx
      pop_argument_stack eax

      pop eax
      push_argument_stack eax ;; e

      pop eax
      push_argument_stack eax ;; f

      push_argument_stack eax
      push_argument_stack ebx
      push_argument_stack ecx
      push_argument_stack edx
      next
   #+end_src
** ----------------------------------
* instruction
** ----------------------------------
** note side-effect
   * an instruction
     is a special primitive function
     which does special side-effect on return-stack
   * note that
     side-effect on return-stack
     should all be done in primitive functions
** note naming
   * the naming convention in assembly code
     of instruction
     is the same as it of jo
   * the name of an instruction
     might not be exported to cicada-language as a function
     but as a variable
   * the name of a special primitive function in assembly code
     maybe reused as a macro word in cicada-language
     but the name of the macro in assembly code
     is prefixed by "M__"
** ----------------------------------
** literal
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*literal*", V__literal
      xx literal

   define_primitive_function "", literal
      ;; << -- fixnum >>
      pop_return_stack rbx
        mov rax, [rbx]
        push_argument_stack rax
      add rbx, cell_size
      push_return_stack rbx
      next
   #+end_src
** address
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*address*", V__address
      xx address

   define_primitive_function "", address
      ;; << -- address >>
      pop_return_stack rbx
        mov rax, [rbx]
        add rax, cell_size
        push_argument_stack rax
      add rbx, cell_size
      push_return_stack rbx
      next
   #+end_src
** ----------------------------------
** branch
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*branch*", V__branch
      xx branch

   define_primitive_function "", branch
      pop_return_stack rbx
      mov rax, [rbx]
      imul rax, cell_size
      add rbx, rax
      push_return_stack rbx
      next
   #+end_src
** false?branch
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*false?branch*", V__false?branch
      xx false?branch

   define_primitive_function "", false?branch
      ;; << true of false -- >>
      pop_argument_stack rax
      test rax, rax
      jnz help__false?branch__not_to_branch

      pop_return_stack rbx
      mov rax, [rbx]
      imul rax, cell_size
      add rbx, rax
      push_return_stack rbx
      next

   help__false?branch__not_to_branch:
      pop_return_stack rbx
      add rbx, cell_size
      push_return_stack rbx
      next
   #+end_src
** ----------------------------------
* bool
** false & true
   * they are defined as function
     and viewed as constant
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "false", false
      ;; << -- false >>
      xor rax, rax
      push_argument_stack rax
      next

   define_primitive_function "true", true
      ;; << -- true >>
      xor rax, rax
      inc rax
      push_argument_stack rax
      next
   #+end_src
** false? & true?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "false?", false?
      ;; << bool -- bool >>
      xx false, equal?
      xx end

   define_function "true?", true?
      ;; << bool -- bool >>
      xx true, equal?
      xx end
   #+end_src
** and & or & not & xor
   * the following two functions are for bool value
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "not", CICADA__not
      ;; << bool -- bool >>
      xx false, equal?
      xx end

   define_function "and", CICADA__and
      ;; << bool, bool -- bool >>
      xx false?, false?branch, (.true-$)/cell_size
      xx   drop
      xx   false
      xx   end
   .true:
      xx false?branch, 3
      xx   true
      xx   end
      xx false
      xx end

   define_function "or", CICADA__or
      ;; << bool, bool -- bool >>
      xx false?branch, (.false-$)/cell_size
      xx   drop
      xx   true
      xx   end
   .false:
      xx false?branch, 3
      xx   true
      xx   end
      xx false
      xx end

   define_function "xor", CICADA__xor
      ;; << bool, bool -- bool >>
      xx false?branch, (.false-$)/cell_size
      xx   CICADA__not
      xx   end
   .false:
      xx end
   #+end_src
** bitwise operations                 :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "bitwise-and", bitwise_and
      ;; << a, b -- a and b >>
      pop_argument_stack rbx
      mov rax, [pointer$argument_stack]
      and [rax - (1 * cell_size)], rbx
      next

   define_primitive_function "bitwise-or", bitwise_or
      ;; << a, b -- a or b >>
      pop_argument_stack rbx
      mov rax, [pointer$argument_stack]
      or  [rax - (1 * cell_size)], rbx
      next

   define_primitive_function "bitwise-xor", bitwise_xor
      ;; << a, b -- a xor b >>
      pop_argument_stack rbx
      mov rax, [pointer$argument_stack]
      xor [rax - (1 * cell_size)], rbx
      next

   define_primitive_function "bitwise-invert", bitwise_invert
      ;; << a -- invert a >>
      mov rax, [pointer$argument_stack]
      not dword [rax - (1 * cell_size)]
      next
   #+end_src
* fixnum
** ----------------------------------
** zero & one
   * they are defined as function
     and viewed as constant
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "zero", zero
      ;; << -- 0 >>
      xor rax, rax
      push_argument_stack rax
      next

   define_primitive_function "one", one
      ;; << -- 1 >>
      xor rax, rax
      inc rax
      push_argument_stack rax
      next
   #+end_src
** zero? & one?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "zero?", zero?
      ;; << bool -- bool >>
      xx zero, equal?
      xx end

   define_function "one?", one?
      ;; << bool -- bool >>
      xx one, equal?
      xx end
   #+end_src
** ----------------------------------
** add & sub                          :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "add1", add1
      ;; << n -- n+1 >>
      pop_argument_stack rax
      inc rax
      push_argument_stack rax
      next

   define_primitive_function "add2", add2
      ;; << n -- n+2 >>
      pop_argument_stack rax
      inc rax
      inc rax
      push_argument_stack rax
      next

   define_primitive_function "add3", add3
      ;; << n -- n+3 >>
      pop_argument_stack rax
      inc rax
      inc rax
      inc rax
      push_argument_stack rax
      next

   define_primitive_function "add4", add4
      ;; << n -- n+4 >>
      pop_argument_stack rax
      inc rax
      inc rax
      inc rax
      inc rax
      push_argument_stack rax
      next

   define_primitive_function "add8", add8
      ;; << n -- n+8 >>
      pop_argument_stack rax
      add rax, 8
      push_argument_stack rax
      next


   define_primitive_function "sub1", sub1
      ;; << n -- n-1 >>
      pop_argument_stack rax
      dec rax
      push_argument_stack rax
      next

   define_primitive_function "sub2", sub2
      ;; << n -- n-2 >>
      pop_argument_stack rax
      dec rax
      dec rax
      push_argument_stack rax
      next

   define_primitive_function "sub3", sub3
      ;; << n -- n-3 >>
      pop_argument_stack rax
      dec rax
      dec rax
      dec rax
      push_argument_stack rax
      next

   define_primitive_function "sub4", sub4
      ;; << n -- n-4 >>
      pop_argument_stack rax
      dec rax
      dec rax
      dec rax
      dec rax
      push_argument_stack rax
      next

   define_primitive_function "sub8", sub8
      ;; << n -- n-8 >>
      pop_argument_stack rax
      sub rax, 8
      push_argument_stack rax
      next


   define_primitive_function "add", addition
      ;; << a b -- a+b >>
      pop_argument_stack rbx
      pop_argument_stack rax
      add rax, rbx
      push_argument_stack rax
      next

   define_primitive_function "sub", subtraction
      ;; << a b -- a-b >>
      pop_argument_stack rbx
      pop_argument_stack rax
      sub rax, rbx
      push_argument_stack rax
      next
   #+end_src
** mul
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "mul", multiple
      ;; << a b -- a*b >>
      pop_argument_stack  rbx ;; 2ed arg
      pop_argument_stack  rax ;; 1st arg
      imul rbx, rax
      ;; imul will ignore overflow
      ;; when there are two registers as arg
      ;; imul will set the result into the first register
      push_argument_stack rbx
      next
   #+end_src
** negate
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "negate", negate
      ;; << n --  -n >>
      xx zero
      xx swap, subtraction
      xx end
   #+end_src
** power
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "power", power
      ;; n must be nature number for now
      ;; << a, n -- a^n >>
      xx literal, 1, swap ;; leave product
      xx help__power
      xx end

   define_function "help,power", help__power
      ;; << a, product, n -- a^n >>
      xx dup, zero?, false?branch, 5
      xx   drop, swap, drop
      xx   end
      xx sub1
      xx swap
      xx   xoverxx, multiple
      xx swap
      xx tail_call, help__power
   #+end_src
** div & mod
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "moddiv", moddiv
      ;; << a, b -- a mod b, quotient >>
      ;; << dividend, divisor -- remainder, quotient >>
      ;; the arg of idiv is divisor
      ;; the lower half of dividend is taken from rax
      ;; the upper half of dividend is taken from rdx
      xor  rdx, rdx   ;; high-part of dividend is not used
      pop_argument_stack  rbx ;; 2ed arg
      pop_argument_stack  rax ;; 1st arg
      idiv rbx
      ;; the remainder is stored in rdx
      ;; the quotient  is stored in rax
      push_argument_stack rdx ;; remainder
      push_argument_stack rax ;; quotient
      next


   define_function "divmod", divmod
      ;; << a, b -- quotient, a mod b >>
      xx moddiv, swap
      xx end

   define_function "div", division
      ;; << a, b -- quotient >>
      xx divmod, drop
      xx end

   define_function "mod", modulo
      ;; << a, b -- a mod b >>
      xx moddiv, drop
      xx end
   #+end_src
** ----------------------------------
** equal? & greater-than? & less-than?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "equal?", equal?
      ;; << a, b -- a, b, true of false >>
      pop_argument_stack rbx
      pop_argument_stack rax
      cmp   rbx, rax
      sete  al
      movzx rax, al
      push_argument_stack rax
      next

   define_primitive_function "less-than?", less_than?
      pop_argument_stack rbx
      pop_argument_stack rax
      cmp   rax, rbx
      setl  al
      movzx rax, al
      push_argument_stack rax
      next

   define_primitive_function "greater-than?", greater_than?
      pop_argument_stack rbx
      pop_argument_stack rax
      cmp   rax, rbx
      setg  al
      movzx rax, al
      push_argument_stack  rax
      next

   define_primitive_function "less-or-equal?", less_or_equal?
      pop_argument_stack rbx
      pop_argument_stack rax
      cmp   rax, rbx
      setle al
      movzx rax, al
      push_argument_stack rax
      next

   define_primitive_function "greater-or-equal?", greater_or_equal?
      pop_argument_stack rbx
      pop_argument_stack rax
      cmp   rax, rbx
      setge al
      movzx rax, al
      push_argument_stack rax
      next
   #+end_src
** negative? & positive?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "negative?", negative?
      ;; << integer -- bool >>
      xx zero, less_than?
      xx end

   define_function "positive?", positive?
      ;; << integer -- bool >>
      xx negative?, false?
      xx end
   #+end_src
** within?
   0 1 2 3 are within 0 3
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "within?", within?
      ;; << x, a, b -- bool >>
      xx xoverxx
      xx greater_or_equal?, CICADA__not, false?branch, 4
      xx   drop2
      xx   false
      xx   end
      xx greater_or_equal?
      xx end
   #+end_src
** ----------------------------------
* memory
** note
   * although the following functions are all side-effect
     but I use "set" instead of "set!"
** set                               :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; "set" and "get" default to a cell_size
   ;; the rule of "get2" and so on are:
   ;;   in memory:
   ;;     ||  1 : value-1  ||
   ;;     ||  1 : value-2  ||
   ;;     ||  1 : value-3  ||
   ;;     ...
   ;;   on stack:
   ;;     << value-1, value-2, value-3, ... >>
   ;; of course we have:
   ;;   get2 : memory=copy=>stack
   ;;   set2  : stack->memory

   define_primitive_function "set", set
      ;; ( value, address -- )
      pop_argument_stack rbx
      pop_argument_stack rax
      mov [rbx], rax
      next

   define_primitive_function "set-byte", set_byte
      ;; ( value, address -- )
      pop_argument_stack rbx
      pop_argument_stack rax
      mov byte[rbx], al
      next

   define_primitive_function "set-two-bytes", set_two_bytes
      ;; ( value, address -- )
      pop_argument_stack rbx
      pop_argument_stack rax
      mov word [rbx], ax
      next

   define_primitive_function "set-four-bytes", set_four_bytes
      ;; ( value, address -- )
      pop_argument_stack rbx
      pop_argument_stack rax
      mov dword [rbx], eax
      next

   define_primitive_function "n-set", n_set
      ;; << value-n, ..., value-1, address, n -- >>
      pop_argument_stack rcx
      pop_argument_stack rdx
      mov rax, cell_size
      imul rax, rcx
      add rdx, rax
      ;; for address is based on 0
      ;; but n is based on 1
      sub rdx, cell_size
   .loop:
      pop_argument_stack rax
      mov dword [rdx], rax
      sub rdx, cell_size
      loop .loop
      next

   define_function "set2", set2
      ;; << value-2, value-1, address -- >>
      xx literal, 2
      xx n_set
      xx end

   define_primitive_function "n-set-byte", n_set_byte
      ;; << value-n, ..., value-1, address, n -- >>
      pop_argument_stack rcx
      pop_argument_stack rdx
      add rdx, rcx
      dec rdx
   .loop:
      pop_argument_stack rax
      mov byte [rdx], al
      dec rdx
      loop .loop
      next

   define_primitive_function "add-set", add_set
      ;; ( number to add, address -- )
      pop_argument_stack rbx
      pop_argument_stack rax
      add dword [rbx], rax
      next

   define_primitive_function "sub-set", sub_set
      ;; ( number to add, address -- )
      pop_argument_stack rbx
      pop_argument_stack rax
      sub dword [rbx], rax
      next
   #+end_src
** get                              :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "get", get
      ;; ( address -- value )
      pop_argument_stack  rbx
      mov rax, [rbx]
      push_argument_stack rax
      next

   define_primitive_function "get-byte", get_byte
      ;; ( address -- value )
      pop_argument_stack rbx
      xor rax, rax
      mov al, byte[rbx]
      push_argument_stack rax
      next

   define_primitive_function "get-two-bytes", get_two_bytes
      ;; ( address -- value )
      pop_argument_stack rbx
      xor rax, rax
      mov ax, word [rbx]
      push_argument_stack rax
      next

   define_primitive_function "get-four-bytes", get_four_bytes
      ;; ( address -- value )
      pop_argument_stack rbx
      xor rax, rax
      mov eax, dword [rbx]
      push_argument_stack rax
      next

   ;;   in memory:
   ;;     ||  1 : value-1  ||
   ;;     ...
   ;;     ||  1 : value-n  ||
   define_primitive_function "n-get", n_get
      ;; << address, n -- value-1, ..., value-n >>
      pop_argument_stack  rcx
      pop_argument_stack  rdx
   .loop:
      mov rax, dword [rdx]
      push_argument_stack rax
      add rdx, cell_size
      loop .loop
      next

   define_primitive_function "n-get-byte", n_get_byte
      ;; << address, n -- byte-1, ..., byte-n >>
      pop_argument_stack  rcx
      pop_argument_stack  rdx
      xor rax, rax
   .loop:
      mov al, byte [rdx]
      push_argument_stack rax
      inc rdx
      loop .loop
      next

   define_function "get2", get2
      ;; << address -- value-1, value-2 >>
      xx literal, 2
      xx n_get
      xx end
   #+end_src
* -----------------------------------
* byte
** space-byte?
   * as for space-byte
     I only use two
     ASCII 10 (newline)
     ASCII 32 (whitespace)
   * note that
     I use the term "whitespace" to denotes the byte
     I use the term "space" to denotes the set of bytes
   * I will simply view number less-or-equal 32 as space-byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "space-byte?", space_byte?
      ;; << byte -- bool >>
      xx literal, 0
      xx literal, 32
      xx within?
      xx end
   #+end_src
** bar-ket-byte?
   * () [] {}
     but not <>
   * double-quote is viewed as special bar-ket-byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "bar-ket-byte?", bar_ket_byte?
      ;; << byte -- bool >>
      xx dup, literal, '(', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx dup, literal, ')', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx dup, literal, '[', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx dup, literal, ']', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx dup, literal, '{', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx dup, literal, '}', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx dup, literal, '"', equal?, false?branch, 4
      xx   drop, true
      xx   end
      xx drop, false
      xx end
   #+end_src
** digit-byte?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "digit-byte?", digit_byte?
      ;; << byte -- bool >>
      xx literal, '0'
      xx literal, '9'
      xx within?
      xx end
   #+end_src
** digit-byte->number & number->digit-byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "digit-byte->number", digit_byte_to_number
      ;; << byte -- number >>
      xx literal, '0'
      xx subtraction
      xx end

   define_function "number->digit-byte", number_to_digit_byte
      ;; << number -- byte >>
      xx literal, '0'
      xx addition
      xx end
   #+end_src
* buffer
** note
   * a buffer is a large vector
     and some functions do not care about how large it is
** compare-buffer
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; return false when length == 0
   define_primitive_function "compare-buffer", compare_buffer
      ;; << address, address, length -- bool >>
      pop_argument_stack rcx
      pop_argument_stack rdi
      pop_argument_stack rsi
      repe cmpsb
      sete al
      movzx rax, al
      push_argument_stack rax
      next
   #+end_src
** cursor->next-matching-byte
   * note that
     it is the NEXT matching-byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "cursor->next-matching-byte", cursor_to_next_matching_byte
      ;; << cursor, byte -- cursor new address >>
      xx over, add1, get_byte
      xx over, equal?, false?branch, 4
      xx   drop, add1
      xx   end
      xx swap
      xx add1, swap
      xx tail_call, cursor_to_next_matching_byte
   #+end_src
* string
** ----------------------------------
** note io about string
** write-string
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "write-string", write_string
      ;; << string[address, length] -- >>
      xx dup, zero?, false?branch, 3
      xx   drop2
      xx   end
      xx sub1, swap
      xx dup, get_byte, write_byte
      xx add1, swap
      xx tail_call, write_string

   define_function ".s", ALIAS__write_string
      ;; << integer -- >>
      xx write_string
      xx end
   #+end_src
** pretty_write_string
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "pretty-write-string", pretty_write_string
      ;; << integer -- >>
      xx write_string
      xx literal, 10
      xx write_byte
      xx end
   #+end_src
** ----------------------------------
** empty-string?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "empty-string?", empty_string?
     ;; << string[address, length] -- bool >>
     xx swap, drop
     xx zero?
     xx end
   #+end_src
** string-equal?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string-equal?", string_equal?
      ;; << string[address, length], string[address, length] -- bool >>
      xx xoverxx, equal?, false?branch, 4
      xx   swap
      xx   compare_buffer
      xx   end
      xx drop, drop2
      xx false
      xx end
   #+end_src
** string,byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,byte", string__byte
      ;; << string[address, length] -- byte >>
      xx drop, get_byte
      xx end
   #+end_src
** string,byte-tail
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,byte-tail", string__byte_tail
      ;; << string[address, length] -- [address + 1, length - 1] >>
      xx sub1, swap
      xx add1
      xx swap
      xx end
   #+end_src
** string,byte-back
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,byte-back", string__byte_back
      ;; << string[address, length] -- [address - 1, length + 1] >>
      xx add1, swap
      xx sub1
      xx swap
      xx end
   #+end_src
** ----------------------------------
** string->buffer!
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "string->buffer!", string_to_buffer!
      ;; ( string[address, length], buffer[address] -- )
      pop_argument_stack rdi ;; destination
      pop_argument_stack rcx ;; counter
      pop_argument_stack rsi ;; source
      rep movsb
      next
   #+end_src
** string-reverse!                    :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   buffer$string_reverse! labeling
      preserve 1024


   define_primitive_function "string-reverse!", string_reverse!
      ;; << string[address, length] -- string[address, length] >>
      mov rbx, [pointer$argument_stack]
      mov rdi, buffer$string_reverse!
      mov rcx, [rbx - (1 * cell_size)]
      mov rsi, [rbx - (2 * cell_size)]
      rep movsb

      mov rcx, [rbx - (1 * cell_size)]
      dec rdi ;; cursor back into string in buffer$string_reverse!
      mov rsi, [rbx - (2 * cell_size)]
   .loop:
      mov al, byte [rdi]
      mov byte [rsi], al
      dec rdi
      inc rsi
      loop .loop

      next
   #+end_src
** one-byte-string?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "one-byte-string?", one_byte_string?
      ;; << string[address, length], byte -- bool >>
      xx xxswapx
      xx dup, one?, false?, false?branch, 5
      xx   drop2, drop
      xx   false
      xx   end
      xx string__byte, equal?, false?branch, 3
      xx   true
      xx   end
      xx false
      xx end
   #+end_src
** zero-string?
   * "0" or "-0"
     0 is special when compiling literal number
     for we are using 0 as "end"
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "zero-string?", zero_string?
      ;; << string[address, length] -- bool >>
      xx dup2, literal, '0', one_byte_string?, false?branch, 4
      xx   drop2, true
      xx   end
      xx dup2
      xx string__byte, literal, '-', equal?, false?, false?branch, 4
      xx   drop2, false
      xx   end
      xx string__byte_tail, literal, '0', one_byte_string?
      xx end
   #+end_src
** digit-string?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "digit-string?", digit_string?
      ;; << string[address, length] -- bool >>
      xx dup, zero?, false?branch, 4
      xx   drop2, true
      xx   end
      xx over, get_byte, digit_byte?, false?branch, 4
      xx   string__byte_tail
      xx   tail_call, digit_string?
      xx drop2, false
      xx end
   #+end_src
** integer-string?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "integer-string?", integer_string?
      ;; << string[address, length] -- bool >>
      xx dup, zero?, false?branch, 4
      xx   drop2, false
      xx   end
      xx dup2, literal, '-', one_byte_string?, false?branch, 4
      xx   drop2, false
      xx   end
      xx dup2, string__byte, literal, '-', equal?, false?branch, 4
      xx   string__byte_tail
      xx   digit_string?
      xx   end
      xx digit_string?
      xx end
   #+end_src
** digit-string->number
   #+begin_src fasm :tangle cicada-nymph.fasm
   sum$digit_string_to_number:
      xx 0

   counter$digit_string_to_number:
      xx 0

   define_function "digit-string->number", digit_string_to_number
      ;; << string[address, length] -- integer >>
      xx zero, literal, sum$digit_string_to_number, set
      xx zero, literal, counter$digit_string_to_number, set

      xx dup2, string_reverse!
      xx   help__digit_string_to_number
      xx string_reverse!, drop2

      xx literal, sum$digit_string_to_number
      xx get
      xx end

   define_function "help,digit-string->number", help__digit_string_to_number
      ;; << reversed-string[address, length] -- >>
      xx dup, zero?, false?branch, 3
      xx   drop2
      xx   end

      xx dup2, string__byte, digit_byte_to_number
      xx   literal, 10
      xx   literal, counter$digit_string_to_number, get
      xx     one
      xx     literal, counter$digit_string_to_number
      xx     add_set
      xx   power
      xx multiple

      xx literal, sum$digit_string_to_number
      xx add_set

      xx string__byte_tail
      xx tail_call, help__digit_string_to_number
   #+end_src
** string->integer
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string->integer", string_to_integer
      ;; << string[address, length] -- integer >>
      xx dup2, string__byte, literal, '-', equal?, false?, false?branch, 3
      xx   digit_string_to_number
      xx   end
      xx string__byte_tail
      xx digit_string_to_number
      xx negate
      xx end
   #+end_src
** ----------------------------------
** string,find-byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,find-byte", string__find_byte
     ;; << string[address, length], byte
     ;;    -- address, true
     ;;    -- false >>
     xx over, zero?, false?branch, 5
     xx   drop, drop2
     xx   false
     xx   end
     xx xoverxx, get_byte
     xx over, equal?, false?branch, 4
     xx   drop2
     xx   true
     xx   end
     xx xxswapx
     xx string__byte_tail
     xx xswapxx
     xx tail_call, string__find_byte
   #+end_src
** test
   #+begin_src cicada-nymph
   : XIE Yuheng ;
   32 string,find-byte . << 1 >>
   get-byte . << 32 >>
   #+end_src
** string-end,byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string-end,byte", string_end__byte
      ;; << string[address, length] -- byte >>
      xx addition, sub1, get_byte
      xx end
   #+end_src
** ----------------------------------
** note
   * one should use space-string? to make sure
     that the string is not space-string
     before calling the following functions
** space-string?
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "space-string?", space_string?
      ;; << string[address, length] -- bool >>
      xx dup, zero?, false?branch, 4
      xx   drop2, true
      xx   end
      xx dup2, string__byte, space_byte?, false?branch, 4
      xx   string__byte_tail
      xx   tail_call, space_string?
      xx drop2, false
      xx end
   #+end_src
** string,word-begin
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,word-begin", string__word_begin
      ;; << string[address, length] -- string[address, length] >>
      xx dup, zero?, false?branch, 2
      ;;   no error handling
      ;;   the same empty-string is returned
      xx   end
      xx dup2
      xx string__byte, space_byte?, false?, false?branch, 2
      xx   end
      xx string__byte_tail
      xx tail_call, string__word_begin
   #+end_src
** string,word-end
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,word-end,loop", string__word_end__loop
      ;; << string[address, length] -- string[address, length] >>
      xx dup, zero?, false?branch, 2
      ;;   no error handling
      ;;   the current empty-string is returned
      xx   end
      xx dup2
      xx string__byte, space_byte?, false?branch, 2
      xx   end
      xx dup2
      xx string__byte, bar_ket_byte?, false?branch, 2
      xx   end
      xx string__byte_tail
      xx tail_call, string__word_end__loop

   define_function "string,word-end", string__word_end
      ;; << string[address, length] -- string[address, length] >>
      xx dup, zero?, false?branch, 2
      ;;   no error handling
      ;;   the same empty-string is returned
      xx   end
      xx dup2
      xx string__byte, bar_ket_byte?, false?branch, 3
      xx   string__byte_tail
      xx   end
      xx string__word_end__loop
      xx end
   #+end_src
** string,word
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,word", string__word
      ;; << string[address, length] -- word[address, length] >>
      xx string__word_begin
      xx dup2, string__word_end
      xx swap, drop
      xx subtraction
      xx end
   #+end_src
** string,word-tail
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "string,word-tail", string__word_tail
      ;; << string[address, length] -- string[address, length] >>
      xx string__word_begin
      xx string__word_end
      xx end
   #+end_src
** ----------------------------------
* write-byte
** write-byte                         :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   buffer$write_byte:
      db 0

   define_primitive_function "write-byte", write_byte
      ;; << byte -- >>
      ;; just calls the Linux write system call
      pop_argument_stack rax
      ;; write can not just write the byte in al to stdout
      ;; write needs the address of the byte to write
      mov [buffer$write_byte], al
      mov linux32_sys_3_edx, 1                 ;; max length to be write
      mov linux32_sys_2_ecx, buffer$write_byte ;; address
      mov linux32_sys_1_ebx, 1                 ;; stdout
      mov linux32_sys_n_eax, linux32_syscall_write
      syscall
      next
   #+end_src
* reading-stack
** note
   * for we do not build border-check
     into the interface of pop and push
     we allocation some memory below the stacks
   * (read-byte) only sees the tos of reading-stack
   * reading-stack helps to implement (eval-string)
     push and pop of reading-stack happens in the function (eval-string)
   * the interface action on string
     i.e. two values
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
   size$reading_stack = 1024 * cell_size

      preserve 64 * cell_size
   address$reading_stack labeling
      preserve size$reading_stack

   define_variable "*reading-stack,pointer*", V__reading_stack__pointer
      xx address$reading_stack
   #+end_src
** push & pop & drop                  :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "push-reading-stack", push_reading_stack
      ;; << string[address, length] -- >>
      pop_argument_stack rax
      mov rsi, [V__reading_stack__pointer + cell_size]
      mov [rsi], rax
      add dword [V__reading_stack__pointer + cell_size], cell_size
      pop_argument_stack rax
      mov rsi, [V__reading_stack__pointer + cell_size]
      mov [rsi], rax
      add dword [V__reading_stack__pointer + cell_size], cell_size
      next

   define_primitive_function "pop-reading-stack", pop_reading_stack
      ;; << -- string[address, length] >>
      sub dword [V__reading_stack__pointer + cell_size], cell_size
      mov rsi, [V__reading_stack__pointer + cell_size]
      mov rax, [rsi]
      push_argument_stack rax
      sub dword [V__reading_stack__pointer + cell_size], cell_size
      mov rsi, [V__reading_stack__pointer + cell_size]
      mov rax, [rsi]
      push_argument_stack rax
      next

   define_primitive_function "drop-reading-stack", drop_reading_stack
      ;; << -- >>
      sub dword [V__reading_stack__pointer + cell_size], (cell_size * 2)
      next
   #+end_src
** tos
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "tos-reading-stack", tos_reading_stack
      ;; << -- string[address, length] >>
      mov rbx, [V__reading_stack__pointer + cell_size]
      sub rbx, cell_size
      mov rax, [rbx]
      push_argument_stack rax
      mov rbx, [V__reading_stack__pointer + cell_size]
      sub rbx, cell_size
      sub rbx, cell_size
      mov rax, [rbx]
      push_argument_stack rax
      next
   #+end_src
** reading-stack-empty?
   * only one string is in reading-stack and it length is zero
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_function "reading-stack-empty?", reading_stack_empty?
      ;; << -- bool >>
      xx literal, V__reading_stack__pointer + cell_size, get
      xx literal, address$reading_stack
      xx equal?
      xx end
   #+end_src
* read-byte
** note end of file
   * do not exit the program
     when meeting <end-of-file>
     so
     when you hit <C-d>
     some you will not exit the interpreter
** note factoring
   * reading from file of stdin is slow
     thus
     1. when reading from file
        a whole file is readed at a time
        and setd to a buffer
     2. when reading from stdin
        a whole line is readed at a time
     3. note that
        reading line instead of keyboard-code
        will limit the design of the user interface
   * by factoring out the low-level calls
     that read a line from stdin
     we are able to implement eval-string easily
** read-line-from-stdin               :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "read-line-from-stdin", read_line_from_stdin
      ;; << buffer address, max length -- counter >>
      pop_argument_stack linux32_sys_3_edx
      pop_argument_stack linux32_sys_2_ecx
      xor linux32_sys_1_ebx, linux32_sys_1_ebx ;; stdin
      mov linux32_sys_n_eax, linux32_syscall_read
      syscall
      ;; the return value
      ;; is a count of the number of bytes transferred
      push_argument_stack rax
      next
   #+end_src
** test read-line-from-stdin
   #+begin_src fasm
   define_function "", test__read_line_from_stdin
      xx literal, buffer$reading
      xx literal, max_input_length
      xx read_line_from_stdin
      xx pretty_write_integer
      xx literal, buffer$reading
      xx literal, 10
      xx write_string
      xx exit_with_tos
      xx end
   #+end_src
** read-byte
   #+begin_src fasm :tangle cicada-nymph.fasm
   max_input_length = 64 * 1024

   buffer$reading labeling
      preserve max_input_length

   replace$reading labeling
      preserve 1024

   define_function "read-byte", read_byte
      ;; << -- byte >>
      xx pop_reading_stack
      xx dup2, empty_string?, CICADA__not, false?branch, (.bad_tos-$)/cell_size
      xx   sub1, swap
      xx   tuck
      xx   add1, swap
      xx   push_reading_stack
      xx   get_byte
      xx   end
   .bad_tos:
      xx reading_stack_empty?, false?branch, (.not_empty-$)/cell_size
      xx   drop2
      xx   literal, buffer$reading
      xx   literal, max_input_length
      xx   read_line_from_stdin
      xx   dup, positive?, false?branch, (.read_error-$)/cell_size
      xx     literal, buffer$reading
      xx     swap
      xx     push_reading_stack
      xx     tail_call, read_byte
   .read_error:
      ;;   ignore <end-of-file>
      ;;   ignore reading error
      xx   drop
      xx   literal, buffer$reading
      xx   literal, 0
      xx   push_reading_stack
      xx   tail_call, read_byte
   .not_empty:
      xx   literal, error$read_byte
      xx   literal, length$read_byte
      xx   write_string
      xx   literal, replace$reading
      xx   literal, 1024
      xx   read_line_from_stdin
      xx   literal, replace$reading
      xx   swap
      xx   push_reading_stack
      xx   tail_call, read_byte

   error$read_byte:
      db "* (read-byte) meets empty-string in reading-stack", 10
      db "  and this empty-stack is not at the bottom of the reading-stack", 10
      db "  you can type a line to replace this empty string", 10
   .end:
   length$read_byte = (.end - error$read_byte)
   #+end_src
* -----------------------------------
* epilog
** un_initialized_memory              :linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   size$un_initialized_memory = 16 * 1024 * 1024 ;; (byte)

   segment readable writeable
   address$un_initialized_memory:
      rb size$un_initialized_memory
   #+end_src
* ===================================
