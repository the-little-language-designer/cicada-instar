#+TITLE:  齡一 / 1st-instar
#+AUTHOR: 謝宇恆 / XIE Yuheng

* ===================================
* note instar
** 1st-instar
   * indirect-threaded-code interpreter
     1. macro about argument_stack & return_stack
     2. macro about jo & jojo
     3. macro about next
     4. the way to do memory allocation
     5. begin_to_interpret_threaded_code
     6. little_test
* ===================================
* prolog
** misc
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; in fasm, "dup" is a reserved word
   dup equ duplicate

   ;; in fasm, "end" is a reserved word
   finish equ end
   end equ exit
   #+end_src
** cell_size                          :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   cell_size = 4 ;; (byte)
   xx equ dd

   rax equ eax
   rbx equ ebx
   rcx equ ecx
   rdx equ edx
   rsp equ esp
   rbp equ ebp
   rsi equ esi
   rdi equ edi

   syscall equ int 80h
   #+end_src
** header                             :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   define linux32_sys_6_ebp ebp
   define linux32_sys_5_edi edi
   define linux32_sys_4_esi esi
   define linux32_sys_3_edx edx
   define linux32_sys_2_ecx ecx
   define linux32_sys_1_ebx ebx
   define linux32_sys_n_eax eax

   define linux32_syscall_exit    1
   define linux32_syscall_read    3
   define linux32_syscall_write   4
   define linux32_syscall_open    5
   define linux32_syscall_close   6
   #+end_src
** format                             :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   format ELF executable 3
   #+end_src
** entry                              :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   entry begin_to_interpret_threaded_code
   segment readable executable writeable
   #+end_src
** memory allocation in un_initialized_memory
   * implemented as a memory map
   #+begin_src fasm :tangle cicada-nymph.fasm
   current_free_address$un_initialized_memory = address$un_initialized_memory

   labeling  equ = current_free_address$un_initialized_memory
   preserve  equ current_free_address$un_initialized_memory = current_free_address$un_initialized_memory +
   #+end_src
* -----------------------------------
* note stack
  * when doing "push"
    a stack-pointer moves to lower address
  * note that another style is that
    when doing "push"
    a stack-pointer moves to higher address
  * the stack-pointer
    always stores the address of current-free-address of the stack
  * note that another style is that
    under the stack-pointer
    there always stores the value of the-top-of-the-stack
* argument-stack
** memory allocation
   * for we do not build border-check
     into the interface of pop and push
     we allocation some memory below the stacks
   #+begin_src fasm :tangle cicada-nymph.fasm
      preserve 64 * cell_size
   address$argument_stack labeling
      preserve 1024 * 1024 * cell_size
   #+end_src
** pointer                            :64bit:
   #+begin_src fasm
   ;; if you want to extend cicada in assembly
   ;; the following registers must NOT be used

   define pointer$argument_stack r15
   #+end_src
** push & pop                         :64bit:
   #+begin_src fasm
   macro push_argument_stack register {
      mov [pointer$argument_stack], register
      add pointer$argument_stack, cell_size
   }

   macro pop_argument_stack register {
      sub pointer$argument_stack, cell_size
      mov register, [pointer$argument_stack]
   }
   #+end_src
** pointer                            :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   pointer$argument_stack:
      xx address$argument_stack
   #+end_src
** push & pop                         :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro push_argument_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$argument_stack]
      mov [ebx], register
      add ebx, cell_size
      mov [pointer$argument_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$argument_stack]
      mov [eax], register
      add eax, cell_size
      mov [pointer$argument_stack], eax
      pop eax
      finish if
   }

   macro pop_argument_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$argument_stack]
      sub ebx, cell_size
      mov register, [ebx]
      mov [pointer$argument_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$argument_stack]
      sub eax, cell_size
      mov register, [eax]
      mov [pointer$argument_stack], eax
      pop eax
      finish if
   }
   #+end_src
* return-stack
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
      preserve 64 * cell_size
   address$return_stack labeling
      preserve 1024 * 1024 * cell_size
   #+end_src
** pointer                            :64bit:
   #+begin_src fasm
   ;; if you want to extend cicada in assembly
   ;; the following registers must NOT be used

   define pointer$return_stack r14
   #+end_src
** push & pop                         :64bit:
   #+begin_src fasm
   macro push_return_stack register {
      mov [pointer$return_stack], register
      add pointer$return_stack, cell_size
   }

   macro pop_return_stack register {
      sub pointer$return_stack, cell_size
      mov register, [pointer$return_stack]
   }
   #+end_src
** pointer                            :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   pointer$return_stack:
      xx address$return_stack
   #+end_src
** push & pop                         :32bit:
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro push_return_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$return_stack]
      mov [ebx], register
      add ebx, cell_size
      mov [pointer$return_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$return_stack]
      mov [eax], register
      add eax, cell_size
      mov [pointer$return_stack], eax
      pop eax
      finish if
   }

   macro pop_return_stack register {
      if register in <eax>
      push ebx
      mov ebx, [pointer$return_stack]
      sub ebx, cell_size
      mov register, [ebx]
      mov [pointer$return_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$return_stack]
      sub eax, cell_size
      mov register, [eax]
      mov [pointer$return_stack], eax
      pop eax
      finish if
   }
   #+end_src
* next
  #+begin_src fasm :tangle cicada-nymph.fasm
  macro next {
     pop_return_stack rbx
       mov rax, [rbx]
     add rbx, cell_size
     push_return_stack rbx
       jmp dword [rax]
  }
  #+end_src
* note play with jo & jojo
  1. at the beginning
     * argument-stack
       << 2 >>
     * return-stack
       #+begin_src return-stack
       - [ (square) ]
           (square)
           (end)
       #+end_src
  2. next
     * argument-stack
       << 2 >>
     * return-stack
       #+begin_src return-stack
           (square)
       - [ (square) ] - [ (dup) ]
           (end)          (mul)
                          (end)
       #+end_src
  3. next
     * argument-stack
       << 2, 2 >>
     * return-stack
       #+begin_src return-stack
           (square)       (dup)
       - [ (square) ] - [ (mul) ]
           (end)          (end)
       #+end_src
  4. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
                          (dup)
           (square)       (mul)
       - [ (square) ] - [ (end) ]
           (end)
       #+end_src
  5. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
       - [ (square) ]
           (end)
       #+end_src
  6. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)
       - [ (end) ] - [ (dup) ]
                       (mul)
                       (end)
       #+end_src
  7. next
     * argument-stack
       << 4, 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)    (dup)
       - [ (end) ] - [ (mul) ]
                       (end)
       #+end_src
  8. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
           (square)    (dup)
           (square)    (mul)
       - [ (end) ] - [ (end) ]
       #+end_src
  9. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)
       - [ (end) ]
       #+end_src
  10. next
      * argument-stack
        << 16 >>
      * return-stack
        #+begin_src return-stack
        - [  ]
        #+end_src
  11. it is really simple
      ^-^
      is it not ?
* helper function in assembly code
** __exit_with_tos                    :linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   __exit_with_tos:
      ;; << exit-code -- >>
      pop_argument_stack linux32_sys_1_ebx
      mov linux32_sys_n_eax, linux32_syscall_exit
      syscall
   #+end_src
* macro for jo & explainer
** ----------------------------------
** link
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; initial link to point to 0 (as null)
   link = 0
   #+end_src
** ----------------------------------
** note primitive_string_heap
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
   size$primitive_string_heap = 100 * 1024 ;; (byte)

   address$primitive_string_heap:
      times size$primitive_string_heap db 0

   current_free_address$primitive_string_heap = address$primitive_string_heap
   #+end_src
** make_primitive_string
   * 2 bytes for length of name_string
   * note that
     the following is using local label
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro make_primitive_string string {

   virtual at 0
   .start$string:
      db string
   .end$string:
      dw (.end$string - .start$string)
      load .length word from (.end$string)
   finish virtual
   store word .length at (current_free_address$primitive_string_heap)

   current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 2

   repeat .length
      virtual at 0
         db string
         load .char byte from (% - 1)
      finish virtual
      store byte .char at (current_free_address$primitive_string_heap)
      current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 1
   finish repeat

   }
   #+end_src
** ----------------------------------
** note
   * note that
     after a "next" "jmp" to a explainer
     the "rax" stores the value of the jo to be explained
     so
     "rax" is used as an inexplicit argument
     of the following functions
   * explain$function is used as jojo-head
     and explains the meaning of the jojo as function
   * a jojo-head identifies one type of jo
** define_function
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_function string, jo {

   define_function__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx explain$function

      ;; here follows a jojo as function-body

   }
   #+end_src
** explain$function
   * find a jojo from a function-jo
     and push the jojo to return-stack
   * a jojo can not be of size 0
   * use rax as an argument
     which stores a jo
   #+begin_src fasm :tangle cicada-nymph.fasm
   explain$function:
      add rax, cell_size
      push_return_stack rax
      next
   #+end_src
** ----------------------------------
** note
   * primitive functions are special
     they explain themself
     and their type is not identified by jojo-head
** define_primitive_function
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_primitive_function string, jo {

   define_primitive_function__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx assembly_code__#jo

   assembly_code__#jo:

      ;; here follows assembly code
      ;; as primitive function body

   }
   #+end_src
** ----------------------------------
** note
   * no constant
     only variable
   * when a variable jo in the jojo
     it push the value of the variable to argument_stack
   * when wish to change a variable's value
     use key_word "address" to get the address of the variable
** define_variable
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_variable string, jo {

   define_variable__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx explain$variable

      ;; here follows a value of cell_size
      ;; only one value is allowed

   }
   #+end_src
** explain$variable
   #+begin_src fasm :tangle cicada-nymph.fasm
   explain$variable:
      add rax, cell_size
      mov rbx, [rax]
      push_argument_stack rbx
      next
   #+end_src
** ----------------------------------
* end
** end
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "end", end
      pop_return_stack rbx
      next
   #+end_src
* *the story begin*
** begin_to_interpret_threaded_code   :32bit:linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   begin_to_interpret_threaded_code:

      cld ;; set DF = 0, then rsi and rdi are incremented

      mov rax, first_jojo
      push_return_stack rax
      next


   first_jojo:
      xx little_test
      xx end
   #+end_src
** exit_with_tos a.k.a. bye
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "bye", exit_with_tos
      call __exit_with_tos
   #+end_src
** little_test
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "", V__little_test_number
      xx 3


   define_function "little_test", little_test

      ;;;; variable
      xx V__little_test_number
      xx exit_with_tos
      ;;;; 3
   #+end_src
** note
   * next
     #+begin_src return-stack
     - [ (little_test) ]
         (end)
     #+end_src
   * next
     #+begin_src return-stack
         (little_test)
     - [ (end) ] -------- [ (V__little_test_number) ]
                            (exit_with_tos)
     #+end_src
   * next
     #+begin_src return-stack
         (little_test)      (V__little_test_number)
     - [ (end) ] -------- [ (exit_with_tos) ]
     #+end_src
* -----------------------------------
* epilog
** un_initialized_memory              :linux:
   #+begin_src fasm :tangle cicada-nymph.fasm
   size$un_initialized_memory = 16 * 1024 * 1024 ;; (byte)

   segment readable writeable
   address$un_initialized_memory:
      rb size$un_initialized_memory
   #+end_src
* ===================================
