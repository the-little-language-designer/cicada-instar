;; in fasm, "dup" is a reserved word
dup equ duplicate

;; in fasm, "end" is a reserved word
finish equ end
end equ exit

cell_size = 4 ;; (byte)
xx equ dd

rax equ eax
rbx equ ebx
rcx equ ecx
rdx equ edx
rsp equ esp
rbp equ ebp
rsi equ esi
rdi equ edi

syscall equ int 80h

define linux32_sys_6_ebp ebp
define linux32_sys_5_edi edi
define linux32_sys_4_esi esi
define linux32_sys_3_edx edx
define linux32_sys_2_ecx ecx
define linux32_sys_1_ebx ebx
define linux32_sys_n_eax eax

define linux32_syscall_exit    1
define linux32_syscall_read    3
define linux32_syscall_write   4
define linux32_syscall_open    5
define linux32_syscall_close   6

format ELF executable 3

entry begin_to_interpret_threaded_code
segment readable executable writeable

current_free_address$un_initialized_memory = address$un_initialized_memory

labeling  equ = current_free_address$un_initialized_memory
preserve  equ current_free_address$un_initialized_memory = current_free_address$un_initialized_memory +

preserve 64 * cell_size
address$argument_stack labeling
   preserve 1024 * 1024 * cell_size

pointer$argument_stack:
   xx address$argument_stack

macro push_argument_stack register {
   if register in <eax>
   push ebx
   mov ebx, [pointer$argument_stack]
   mov [ebx], register
   add ebx, cell_size
   mov [pointer$argument_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$argument_stack]
   mov [eax], register
   add eax, cell_size
   mov [pointer$argument_stack], eax
   pop eax
   finish if
}

macro pop_argument_stack register {
   if register in <eax>
   push ebx
   mov ebx, [pointer$argument_stack]
   sub ebx, cell_size
   mov register, [ebx]
   mov [pointer$argument_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$argument_stack]
   sub eax, cell_size
   mov register, [eax]
   mov [pointer$argument_stack], eax
   pop eax
   finish if
}

preserve 64 * cell_size
address$return_stack labeling
   preserve 1024 * 1024 * cell_size

pointer$return_stack:
   xx address$return_stack

macro push_return_stack register {
   if register in <eax>
   push ebx
   mov ebx, [pointer$return_stack]
   mov [ebx], register
   add ebx, cell_size
   mov [pointer$return_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$return_stack]
   mov [eax], register
   add eax, cell_size
   mov [pointer$return_stack], eax
   pop eax
   finish if
}

macro pop_return_stack register {
   if register in <eax>
   push ebx
   mov ebx, [pointer$return_stack]
   sub ebx, cell_size
   mov register, [ebx]
   mov [pointer$return_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$return_stack]
   sub eax, cell_size
   mov register, [eax]
   mov [pointer$return_stack], eax
   pop eax
   finish if
}

macro next {
   pop_return_stack rbx
     mov rax, [rbx]
   add rbx, cell_size
   push_return_stack rbx
     jmp dword [rax]
}

__exit_with_tos:
   ;; << exit-code -- >>
   pop_argument_stack linux32_sys_1_ebx
   mov linux32_sys_n_eax, linux32_syscall_exit
   syscall

;; initial link to point to 0 (as null)
link = 0

size$primitive_string_heap = 100 * 1024 ;; (byte)

address$primitive_string_heap:
   times size$primitive_string_heap db 0

current_free_address$primitive_string_heap = address$primitive_string_heap

macro make_primitive_string string {

virtual at 0
.start$string:
   db string
.end$string:
   dw (.end$string - .start$string)
   load .length word from (.end$string)
finish virtual
store word .length at (current_free_address$primitive_string_heap)

current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 2

repeat .length
   virtual at 0
      db string
      load .char byte from (% - 1)
   finish virtual
   store byte .char at (current_free_address$primitive_string_heap)
   current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 1
finish repeat

}

macro define_function string, jo {

define_function__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx explain$function

   ;; here follows a jojo as function-body

}

explain$function:
   add rax, cell_size
   push_return_stack rax
   next

macro define_primitive_function string, jo {

define_primitive_function__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx assembly_code__#jo

assembly_code__#jo:

   ;; here follows assembly code
   ;; as primitive function body

}

macro define_variable string, jo {

define_variable__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx explain$variable

   ;; here follows a value of cell_size
   ;; only one value is allowed

}

explain$variable:
   add rax, cell_size
   mov rbx, [rax]
   push_argument_stack rbx
   next

define_primitive_function "end", end
   pop_return_stack rbx
   next

begin_to_interpret_threaded_code:

   cld ;; set DF = 0, then rsi and rdi are incremented

   mov rax, first_jojo
   push_return_stack rax
   next


first_jojo:
   xx little_test
   xx end

define_primitive_function "bye", exit_with_tos
   call __exit_with_tos

define_variable "", V__little_test_number
   xx 3


define_function "little_test", little_test

   ;;;; variable
   xx V__little_test_number
   xx exit_with_tos
   ;;;; 3

size$un_initialized_memory = 16 * 1024 * 1024 ;; (byte)

segment readable writeable
address$un_initialized_memory:
   rb size$un_initialized_memory
